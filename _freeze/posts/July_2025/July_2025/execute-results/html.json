{
  "hash": "140094bc9a157a8e0fd3bdf41db8003f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R tips July 2025\"\ndescription: \"A practical, hands-on introduction to debugging in R. We explore core tools (browser(), debugonce(), traceback(), recover()) and demonstrate how to apply them in both scripts and Shiny applications, with live examples and step-by-step guidance to streamline your workflow.\"\nauthor: \"Nikita M.\"\nformat:\n  html:\n    page-layout: article\n    toc: true\n    html-math-method: katex\n    highlight: tango\ndate: \"2025-07-10\"\ntitle-block-banner: false\ncategories: [R-tips]\n---\n\n\n\n# Debugging in R: Practical Tools and Techniques\n\n## Introduction\n\nDebugging is essential in programming for identifying and resolving errors effectively. Good debugging skills enhance productivity and ensure code reliability.\n\n**Topics Covered:**\n\n-   `browser()`\n-   `debugonce()`\n-   `traceback()`\n-   `recover()`\n-   Debugging Shiny applications\n\n------------------------------------------------------------------------\n\n## The `browser()` Function\n\n**Purpose:** Pauses execution, allowing interactive inspection.\n\n**Example:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function <- function(x) {\n    y <- x + 10\n    browser()\n    z <- y / 2\n    return(z)\n}\n\nmy_function(5)\n```\n:::\n\n\n\n**How to use:**\n\n-   Inspect variables directly.\n-   Step through code (`n` for next, `c` to continue).\n\n------------------------------------------------------------------------\n\n## The `debugonce()` Function\n\n**Purpose:** Debugs a function exactly once.\n\n**Example:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_numbers <- function(a, b) {\n    sum <- a + b\n    return(sum)\n}\n\ndebugonce(add_numbers)\n\nadd_numbers(3, \"two\")\n```\n:::\n\n\n\n**How to use:**\n\n-   Automatically enters debug mode at next call.\n-   Useful for inspecting unexpected errors inside functions.\n\n------------------------------------------------------------------------\n\n## The `traceback()` Function\n\n**Purpose:** Identifies the call sequence leading to an error.\n\n**Example:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunc_a <- function() { func_b() }\nfunc_b <- function() { stop(\"An error occurred!\") }\n\nfunc_a()\ntraceback()\n```\n:::\n\n\n\n**How to use:**\n\n-   Quickly identifies problematic calls.\n-   Ideal for debugging nested functions.\n\n------------------------------------------------------------------------\n\n## The `recover()` Function\n\n**Purpose:** Interactive debugging at the moment an error occurs.\n\nSet this first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(error = recover)\n\nf1 <- function(x) { f2(x) }\nf2 <- function(x) { f3(x) }\nf3 <- function(x) { stop(\"Unexpected error!\") }\n\nf1(10)\n```\n:::\n\n\n\n**How to use:**\n\n-   Provides menu to enter error environments.\n-   Inspect variables interactively.\n\n------------------------------------------------------------------------\n\n## Debugging Shiny Applications\n\nDebugging Shiny can be challenging. Key approaches include:\n\n-   Use `browser()` in reactive contexts:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui <- fluidPage(\n    numericInput(\"num\", \"Number:\", 10),\n    textOutput(\"result\")\n)\n\nserver <- function(input, output) {\n    output$result <- renderText({\n        browser()\n        paste(\"Double:\", input$num * 2)\n    })\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n\n-   Monitor logs and console outputs.\n\n------------------------------------------------------------------------\n\n## Summary: Key Takeaways\n\n-   `browser()` - Interactive inspection.\n-   `debugonce()` - Single-use debugging.\n-   `traceback()` - Error call sequence.\n-   `recover()` - Interactive error handling.\n-   Shiny apps - Combine `browser()`, logging, and output checks.\n\nEffective debugging greatly enhances coding efficiency and reliability.\n\n------------------------------------------------------------------------\n\n## References\n\n-   [R Debugging manual – CRAN](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Debugging)\n-   [Advanced R: Debugging R code](https://adv-r.hadley.nz/debugging.html)\n-   [RStudio: Debugging tools](https://support.rstudio.com/hc/en-us/articles/205612627-Debugging-with-RStudio)\n-   [Shiny – Debugging guide](https://shiny.rstudio.com/articles/debugging.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}